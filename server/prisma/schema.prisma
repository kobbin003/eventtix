// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id           String      @id @default(uuid())
  name         String      @unique
  email        String      @unique
  password     String
  events       Event[]
  personnels   Personnels? @relation(fields: [personnelsId], references: [id], onDelete: Cascade)
  personnelsId String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  address      Address?    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    String?     @unique
  payment      Payment?
}

model Payment {
  id               String  @id @default(uuid())
  org              Org?    @relation(fields: [orgId], references: [id])
  orgId            String? @unique
  connectedAccId   String  @unique
  detailsSubmitted Boolean @default(false)
}

model Address {
  id           String   @id @default(uuid())
  addressLine1 String
  addressLine2 String?
  state        String
  pin          Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  org          Org?
}

model Personnels {
  id            String   @id @default(uuid())
  principal     String
  vicePrincipal String
  staffs        String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  org           Org?
}

model Event {
  id          String     @id @default(uuid())
  title       String
  imageUrl    String
  desc        String
  location    String
  time        DateTime
  ticketType  TicketType
  ticketPrice Int
  org         Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  purchases   Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  productId   String?
  priceId     String?
}

// productId and priceId: for stripe

enum TicketType {
  free
  paid
}

model Purchase {
  id                String  @id @default(uuid())
  checkoutSessionId String  @unique
  amount            Int
  Event             Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId           String?
}

// model Buyer {
//   id        String   @id @default(uuid())
//   event     Event    @relation(fields: [eventId], references: [id])
//   eventId   String
//   name      String
//   email     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   address   Address  @relation(fields: [addressId], references: [id])
//   addressId String   @unique
// }

model Example {
  id   String @id @default(uuid())
  name String
  age  Int
}
